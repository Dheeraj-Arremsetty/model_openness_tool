<?php

declare(strict_types=1);

/**
 * @file
 * Provides a model entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function mof_theme(): array {
  return [
    'model_link' => [
      'variables' => [
        'model' => NULL,
        'github' => NULL,
        'huggingface' => NULL,
      ],
    ],
    'badge' => [
      'variables' => [
        'background_color' => '#4c1',
        'text_color' => '#fff',
        'label' => NULL,
        'status' => NULL,
      ],
    ],
  ];
}

/**
 * Allow only github repos values.
 */
function mof_github_repo_list(FieldStorageDefinitionInterface $definition, ?FieldableEntityInterface $entity = NULL, &$cacheable = TRUE): array {
  $github = \Drupal::service('github');
  return $github->isAuthenticated() ? $github->getRepoList() : [];
}

/**
 * Implements hook_user_cancel().
 */
function mof_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_reassign':
      // Anonymize model
      $storage = \Drupal::entityTypeManager()->getStorage('model');
      $model_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($model_ids) as $model) {
        $model->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function mof_user_predelete(UserInterface $account): void {
  // Delete models that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('model');
  $model_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($model_ids)
  );
  // Delete old revisions.
  $model_ids = $storage->getQuery()
    ->allRevisions()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  foreach (array_keys($model_ids) as $revision_id) {
    $storage->deleteRevision($revision_id);
  }
}

/**
 * Implements hook_query_TAG_alter().
 * Adds a model entity access check to model storage queries.
 * Ensure the model is approved for non-admin users.
 */
function mof_query_model_access_alter(AlterableInterface $query) {
  $user = \Drupal::currentUser();

  if (!$user->hasRole('admin') && (int)$user->id() !== 1) {
    $base_table = $query->getTables()['base_table']['alias'];
    $query->leftJoin('model_field_data', 'mfd', "mfd.id = $base_table.id");
    $query->condition('mfd.status', 'approved', '=');
  }

  return $query;
}
